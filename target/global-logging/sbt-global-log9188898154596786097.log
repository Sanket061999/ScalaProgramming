[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\deshmuks\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\deshmuks\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.10.0 (Oracle Corporation Java 1.8.0_202)
[debug] Load.defaultLoad until apply took 355.1539ms
[debug]           Load.loadUnit: plugins took 154.546ms
[debug]           Load.loadUnit: defsScala took 0.4816ms
[debug] [Loading] Scanning directory C:\Git_Workspace\ScalaProgramming\project
[debug]             Load.loadUnit: mkEval took 17.5828ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Git_Workspace\ScalaProgramming\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 60.3696 ms
[info] loading settings for project scalaprogramming-build from idea.sbt ...
[debug]               Load.resolveProject(scalaprogramming-build) took 158.9584ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalaprogramming-build, base: C:\Git_Workspace\ScalaProgramming\project, plugins: List(<none>))) took 250.9906ms
[debug] [Loading] Done in C:\Git_Workspace\ScalaProgramming\project, returning: (scalaprogramming-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 8899.2303ms
[debug]           Load.loadUnit: cleanEvalClasses took 17.5516ms
[debug]         Load.loadUnit(file:/C:/Git_Workspace/ScalaProgramming/project/, ...) took 9082.4939ms
[debug]       Load.apply: load took 9580.854ms
[debug]       Load.apply: resolveProjects took 16.2639ms
[debug]       Load.apply: finalTransforms took 159.2541ms
[debug]       Load.apply: config.delegates took 14.388ms
[debug]       Load.apply: Def.make(settings)... took 964.5576ms
[debug]       Load.apply: structureIndex took 194.4198ms
[debug]       Load.apply: mkStreams took 2.5079ms
[info] loading project definition from C:\Git_Workspace\ScalaProgramming\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 15138.9617ms
[debug]     Load.loadUnit: defsScala took 0.0047ms
[debug] [Loading] Scanning directory C:\Git_Workspace\ScalaProgramming
[debug]       Load.loadUnit: mkEval took 0.6083ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 6.5388 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 68.1303ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Git_Workspace\ScalaProgramming, plugins: List(<none>))) took 78.9697ms
[debug] [Loading] Done in C:\Git_Workspace\ScalaProgramming, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 1983.7871ms
[debug]     Load.loadUnit: cleanEvalClasses took 21.7417ms
[debug]   Load.loadUnit(file:/C:/Git_Workspace/ScalaProgramming/, ...) took 17146.503ms
[debug] Load.apply: load took 17178.0861ms
[debug] Load.apply: resolveProjects took 0.1745ms
[debug] Load.apply: finalTransforms took 61.5032ms
[debug] Load.apply: config.delegates took 0.6172ms
[debug] Load.apply: Def.make(settings)... took 196.3978ms
[debug] Load.apply: structureIndex took 68.0248ms
[debug] Load.apply: mkStreams took 0.004ms
[info] set current project to ScalaProgramming (in build file:/C:/Git_Workspace/ScalaProgramming/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 54134 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 54134, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to ScalaProgramming (in build file:/C:/Git_Workspace/ScalaProgramming/)
[debug] > Exec(idea-shell, None, None)
